// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;
using ShadowrunGM.API.Infrastructure;

#nullable disable

namespace ShadowrunGM.API.Infrastructure.Migrations
{
    [DbContext(typeof(ShadowrunContext))]
    partial class ShadowrunContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pg_trgm");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "unaccent");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ShadowrunGM.API.Infrastructure.Entities.Catalog.GameItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Availability")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("availability");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("cost");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Vector>("Embedding")
                        .HasColumnType("vector(768)")
                        .HasColumnName("embedding");

                    b.Property<string>("EmbeddingModel")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("embedding_model");

                    b.Property<int?>("EmbeddingVersion")
                        .HasColumnType("integer")
                        .HasColumnName("embedding_version");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("item_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int?>("Page")
                        .HasColumnType("integer")
                        .HasColumnName("page");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(220)
                        .HasColumnType("character varying(220)")
                        .HasColumnName("slug");

                    b.Property<long>("SourcebookId")
                        .HasColumnType("bigint")
                        .HasColumnName("sourcebook_id");

                    b.Property<string>("StatsJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("{}")
                        .HasColumnName("stats_json");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.HasKey("Id")
                        .HasName("pk_game_items");

                    b.HasIndex("Cost")
                        .HasDatabaseName("ix_game_items_cost");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ix_game_items_slug");

                    b.HasIndex("SourcebookId")
                        .HasDatabaseName("ix_game_items_sourcebook_id");

                    b.HasIndex("ItemType", "Category")
                        .HasDatabaseName("ix_game_items_item_type_category");

                    b.HasIndex("SourcebookId", "Page")
                        .HasDatabaseName("ix_game_items_sourcebook_id_page");

                    b.ToTable("game_items", (string)null);
                });

            modelBuilder.Entity("ShadowrunGM.API.Infrastructure.Entities.Catalog.MagicAbility", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AbilityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ability_type");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<int?>("DrainValue")
                        .HasColumnType("integer")
                        .HasColumnName("drain_value");

                    b.Property<string>("Duration")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("duration");

                    b.Property<Vector>("Embedding")
                        .HasColumnType("vector(768)")
                        .HasColumnName("embedding");

                    b.Property<string>("EmbeddingModel")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("embedding_model");

                    b.Property<int?>("EmbeddingVersion")
                        .HasColumnType("integer")
                        .HasColumnName("embedding_version");

                    b.Property<string>("ExtraJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("{}")
                        .HasColumnName("extra_json");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_verified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int?>("Page")
                        .HasColumnType("integer")
                        .HasColumnName("page");

                    b.Property<decimal?>("PowerPointCost")
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("power_point_cost");

                    b.Property<string>("Range")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("range");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(220)
                        .HasColumnType("character varying(220)")
                        .HasColumnName("slug");

                    b.Property<long>("SourcebookId")
                        .HasColumnType("bigint")
                        .HasColumnName("sourcebook_id");

                    b.Property<string>("Type")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.HasKey("Id")
                        .HasName("pk_magic_abilities");

                    b.HasIndex("IsVerified")
                        .HasDatabaseName("ix_magic_abilities_is_verified");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ix_magic_abilities_slug");

                    b.HasIndex("SourcebookId")
                        .HasDatabaseName("ix_magic_abilities_sourcebook_id");

                    b.HasIndex("AbilityType", "Category")
                        .HasDatabaseName("ix_magic_abilities_ability_type_category");

                    b.HasIndex("SourcebookId", "Page")
                        .HasDatabaseName("ix_magic_abilities_sourcebook_id_page");

                    b.ToTable("magic_abilities", (string)null);
                });

            modelBuilder.Entity("ShadowrunGM.API.Infrastructure.Entities.Import.RuleContent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("ContentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("content_type");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Vector>("Embedding")
                        .HasColumnType("vector(768)")
                        .HasColumnName("embedding");

                    b.Property<string>("EmbeddingModel")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("embedding_model");

                    b.Property<int?>("EmbeddingVersion")
                        .HasColumnType("integer")
                        .HasColumnName("embedding_version");

                    b.Property<string>("Heading")
                        .HasColumnType("text")
                        .HasColumnName("heading");

                    b.Property<int>("HeadingLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("heading_level");

                    b.Property<string>("HeadingTitle")
                        .HasColumnType("text")
                        .HasColumnName("heading_title");

                    b.Property<int?>("PageNumber")
                        .HasColumnType("integer")
                        .HasColumnName("page_number");

                    b.Property<long?>("ParentContentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_content_id");

                    b.Property<string>("Section")
                        .HasColumnType("text")
                        .HasColumnName("section");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer")
                        .HasColumnName("sequence_number");

                    b.Property<string>("SourceHash")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("source_hash")
                        .HasComputedColumnSql("md5(content)", true);

                    b.Property<long>("SourcebookId")
                        .HasColumnType("bigint")
                        .HasColumnName("sourcebook_id");

                    b.HasKey("Id")
                        .HasName("pk_rule_contents");

                    b.HasIndex("Content")
                        .HasDatabaseName("ix_rule_contents_content");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Content"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Content"), new[] { "gin_trgm_ops" });

                    b.HasIndex("Heading")
                        .HasDatabaseName("ix_rule_contents_heading");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Heading"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Heading"), new[] { "gin_trgm_ops" });

                    b.HasIndex("HeadingTitle")
                        .HasDatabaseName("ix_rule_contents_heading_title");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("HeadingTitle"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("HeadingTitle"), new[] { "gin_trgm_ops" });

                    b.HasIndex("ParentContentId")
                        .HasDatabaseName("ix_rule_contents_parent_content_id");

                    b.HasIndex("SourcebookId", "ContentType")
                        .HasDatabaseName("ix_rule_contents_sourcebook_id_content_type");

                    b.HasIndex("SourcebookId", "HeadingLevel")
                        .HasDatabaseName("ix_rule_contents_sourcebook_id_heading_level");

                    b.HasIndex("SourcebookId", "PageNumber")
                        .HasDatabaseName("ix_rule_contents_sourcebook_id_page_number");

                    b.HasIndex("SourcebookId", "SequenceNumber")
                        .HasDatabaseName("ix_rule_contents_sourcebook_id_sequence_number");

                    b.HasIndex("SourcebookId", "SourceHash")
                        .IsUnique()
                        .HasDatabaseName("ix_rule_contents_sourcebook_id_source_hash");

                    b.ToTable("rule_contents", (string)null);
                });

            modelBuilder.Entity("ShadowrunGM.API.Infrastructure.Entities.Import.Sourcebook", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Edition")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("6e")
                        .HasColumnName("edition");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("file_hash");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("file_name");

                    b.Property<DateTimeOffset>("ImportedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("imported_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_utc")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<int?>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_sourcebooks");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_sourcebooks_code");

                    b.HasIndex("FileHash")
                        .HasDatabaseName("ix_sourcebooks_file_hash");

                    b.HasIndex("Title")
                        .HasDatabaseName("ix_sourcebooks_title");

                    b.ToTable("sourcebooks", (string)null);
                });

            modelBuilder.Entity("ShadowrunGM.API.Infrastructure.Entities.Catalog.GameItem", b =>
                {
                    b.HasOne("ShadowrunGM.API.Infrastructure.Entities.Import.Sourcebook", null)
                        .WithMany()
                        .HasForeignKey("SourcebookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_items_sourcebooks_sourcebook_id");
                });

            modelBuilder.Entity("ShadowrunGM.API.Infrastructure.Entities.Catalog.MagicAbility", b =>
                {
                    b.HasOne("ShadowrunGM.API.Infrastructure.Entities.Import.Sourcebook", null)
                        .WithMany()
                        .HasForeignKey("SourcebookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_magic_abilities_sourcebooks_sourcebook_id");
                });

            modelBuilder.Entity("ShadowrunGM.API.Infrastructure.Entities.Import.RuleContent", b =>
                {
                    b.HasOne("ShadowrunGM.API.Infrastructure.Entities.Import.RuleContent", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentContentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_rule_contents_rule_contents_parent_content_id");

                    b.HasOne("ShadowrunGM.API.Infrastructure.Entities.Import.Sourcebook", "Sourcebook")
                        .WithMany("Contents")
                        .HasForeignKey("SourcebookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rule_contents_sourcebooks_sourcebook_id");

                    b.Navigation("Parent");

                    b.Navigation("Sourcebook");
                });

            modelBuilder.Entity("ShadowrunGM.API.Infrastructure.Entities.Import.Sourcebook", b =>
                {
                    b.Navigation("Contents");
                });
#pragma warning restore 612, 618
        }
    }
}
